# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: CI/CD using github actions & docker

on: [push]

jobs:
  Ci-CD:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        

    - name: make application.yml
      if: | 
        contains(github.ref, 'main') |
      run: |
        mkdir ./src/main/resources # resources 폴더 생성
        cd ./src/main/resources # resources 폴더로 이동
        touch ./application.yml # application.yml 생성
        echo "${{secrets.YML}}" > ./application.yml # github actions에서 사용할 값을 application.yml파일에서 쓰기
      shell: bash

    # 환경별 yml 파일 생성(2) - dev
    - name: make application-dev.yml
      if: contains(github.ref, 'develop')
      run: |
        cd ./src/main/resources
        touch ./application-dev.yml
        echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
      shell: bash
    
    # 환경별 yml 파일 생성(3) - prod
    - name: make application-prod.yml
      if: contains(github.ref, 'main')
      run: |
        cd ./src/main/resources
        touch ./application-prod.yml
        echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
      shell: bash

    # gradle build
    - name: Build with Gradle
      run: ./gradlew build -x test

    # docker build & push to production
    - name: Docker build & push to prod
      if: contains(github.ref, 'main')
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/docker-test-prod .
        docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-prod

    ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'main')
      with:
        host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
        username: ubuntu
        key: ${{ secrets.PRIVATE_KEY }} #id_ed25519
        envs: GITHUB_SHA
        script: |
          sudo docker ps
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
          sudo docker run -d -p 8082:8082 ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
          sudo docker image prune -f
